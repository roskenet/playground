% Options for packages loaded elsewhere
\PassOptionsToPackage{unicode}{hyperref}
\PassOptionsToPackage{hyphens}{url}
%
\documentclass[
]{article}
\usepackage{lmodern}
\usepackage{amssymb,amsmath}
\usepackage{ifxetex,ifluatex}
\ifnum 0\ifxetex 1\fi\ifluatex 1\fi=0 % if pdftex
  \usepackage[T1]{fontenc}
  \usepackage[utf8]{inputenc}
  \usepackage{textcomp} % provide euro and other symbols
\else % if luatex or xetex
  \usepackage{unicode-math}
  \defaultfontfeatures{Scale=MatchLowercase}
  \defaultfontfeatures[\rmfamily]{Ligatures=TeX,Scale=1}
\fi
% Use upquote if available, for straight quotes in verbatim environments
\IfFileExists{upquote.sty}{\usepackage{upquote}}{}
\IfFileExists{microtype.sty}{% use microtype if available
  \usepackage[]{microtype}
  \UseMicrotypeSet[protrusion]{basicmath} % disable protrusion for tt fonts
}{}
\makeatletter
\@ifundefined{KOMAClassName}{% if non-KOMA class
  \IfFileExists{parskip.sty}{%
    \usepackage{parskip}
  }{% else
    \setlength{\parindent}{0pt}
    \setlength{\parskip}{6pt plus 2pt minus 1pt}}
}{% if KOMA class
  \KOMAoptions{parskip=half}}
\makeatother
\usepackage{xcolor}
\IfFileExists{xurl.sty}{\usepackage{xurl}}{} % add URL line breaks if available
\IfFileExists{bookmark.sty}{\usepackage{bookmark}}{\usepackage{hyperref}}
\hypersetup{
  hidelinks,
  pdfcreator={LaTeX via pandoc}}
\urlstyle{same} % disable monospaced font for URLs
\setlength{\emergencystretch}{3em} % prevent overfull lines
\providecommand{\tightlist}{%
  \setlength{\itemsep}{0pt}\setlength{\parskip}{0pt}}
\setcounter{secnumdepth}{-\maxdimen} % remove section numbering

\author{}
\date{}

\begin{document}

\hypertarget{dont-touch-that-code}{%
\section{Don't Touch that Code!}\label{dont-touch-that-code}}

It has happened to everyone of us at some point. Your code was rolled on
to the staging server for system testing and the testing manager writes
back that she has hit a problem. Your first reaction is ``Quick, let me
fix that --- I know what's wrong.''

In the bigger sense, though, what is wrong is that as a developer you
think you should have access to the staging server.

In most web-based development environments the architecture can be
broken down like this:

\begin{itemize}
\tightlist
\item
  Local development and unit testing on the developer's machine
\item
  Development server where manual or automated integration testing is
  done
\item
  Staging server where the QA team and the users do acceptance testing
\item
  Production server
\end{itemize}

Yes, there are other servers and services sprinkled in there, like
source code control and ticketing, but you get the idea. Using this
model, a developer --- even a senior developer --- should never have
access beyond the development server. Most development is done on a
developer's local machine using their favorite blend of IDEs, virtual
machines, and an appropriate amount of black magic sprinkled over it for
good luck.

Once checked into SCC, whether automatically or manually, it should be
rolled over to the development server where it can be tested and tweaked
if necessary to make sure everything works together. From this point on,
though, the developer is a spectator to the process.

The staging manager should package and roll the code to the staging
server for the QA team. Just like developers should have no need to
access anything beyond the development server, the QA team and the users
have no need to touch anything on the development server. If it's ready
for acceptance testing, cut a release and roll, don't ask the user to
``Just look at something real quick'' on the development server.
Remember, unless you are coding the project by yourself, other people
have code there and they may not be ready for the user to see it. The
release manager is the only person who should have access to both.

Under no circumstances --- ever, at all --- should a developer have
access to a production server. If there is a problem, your support staff
should either fix it or request that you fix it. After it's checked into
SCC they will roll a patch from there. Some of the biggest programming
disasters I've been a part of have taken place because someone
*\emph{cough}*me*\emph{cough*} violated this last rule. If it's broke,
production is not the place to fix it.

by
\href{http://programmer.97things.oreilly.com/wiki/index.php/Cal_Evans}{Cal
Evans}

\end{document}
